/**
 * Defines a Sequelize model called User and then returns it , so it can be used
 * elsewhere in your app
 */

import { DataTypes } from 'sequelize';

export default (sequelize) => {
  const User = sequelize.define('User', {
    id: {
      type: DataTypes.UUID, // Universally Unique Identifier, itâ€™s a 128-bit value
      defaultValue: DataTypes.UUIDV4, // V4 is the most common verion of UUID
      primaryKey: true,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
      validate: {
        isEmail: true,
      },
    },
    username: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
      validate: {
        len: [6, 20],
      },
    },
    passwordHash: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    pinCodeHash: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    googleId: {
      type: DataTypes.STRING,
      unique: true,
    },
    twoFASecret: {
      type: DataTypes.STRING, // Stores the TOTP secret (generated by speakeasy and used for QR code generation).
    },
    backupCodes: {
      type: DataTypes.JSON, //  Useful for recovery if the user loses access to their authenticator app (stores an array of codes).
    },
    is2FAEnabled: {
      // A virtual column is not stored in the database
      type: DataTypes.VIRTUAL, // Virtual flag to check if TOTP is enabled.
      get() {
        return !!this.twoFASecret; // "!!" negates twice, converts the value to a boolean
      }
    },
    isVerified: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
    },
    role: {
      type: DataTypes.ENUM('user', 'admin'), // add role with ENUM
      allowNull: false,
      defaultValue: 'user',
    },
    avatarUrl: {
      type: DataTypes.STRING,
      allowNull: true,
      validate: {
        isUrl: true,
      }
    },
    isVerified: { // Use for checking if the user finishs the registeration flow
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    },
  }, {
    // timestamps: true, it tells Sequelize to add createdAt and updatedAt two columns
    // into User table
    timestamps: true,
    // indexes option in a Sequelize model definition tells sequelize to add indexed to
    // specific columns in the User table when it creates or sycns the database schema.
    indexes: [
      { fields: ['email'] }, // Speed up email lookups
      { fields: ['googleId'] }, // Speed up OAuth lookups
      { fields: ['role'] }, // Speed up faster queries
    ],
    // defaultScope is the default behavior for all queries on this model.
    // Here by default, 'twoFASecret' and 'backupCodes' will NOT be included in any query result
    defaultScope: {
      attributes: {
        exclude: ['pinCodeHash', 'passwordHash', 'twoFASecret', 'backupCodes']
      }
    },
    // Scopes are named sets of query options you can apply explicitly when needed.
    // const userWithSecrets = await User.scope('withSecrets').findByPk(id); then the result
    // will include twoFASecret and backupCodes
    scopes: {
      withSecrets: {
        attributes: { include: ['twoFASecret', 'backupCodes'] }
      }
    },
  });

  User.associate = (models) => {
    User.hasMany(models.RefreshToken, {
      foreignKey: 'userId',
      as: 'refreshTokens',
      onDelete: 'CASCADE', // if user is deleted, delete all tokens
    });
  };

  return User;
};

